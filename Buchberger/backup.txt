		do
		{
			symb = source[symb_place++];

			if (symb < 0 || symb > 122) throw ParsingException("введен недопустимый символ", symb_place);

			if (what_type(symb) != SymbolTypes::empty)
			{
				if (what_type(symb) == SymbolTypes::open_comment)
				{
					state_served = state;
					state = 6;
				}
				switch (state)
				{
				case 0:
					switch (what_type(symb)) {
					case SymbolTypes::sign:
					case SymbolTypes::digit:
						to_state(1); break;
					case SymbolTypes::letter:
						setMonomCoeff(symb_place, 1, rules); break;
					case SymbolTypes::trail:
						to_state(4); break;
					default:
						throw ParsingException("некорректное начало полинома", symb_place);
						break;
					}
				case 1:
					else if (isdig(symb)) str += symb;
					else if (isalph(symb))
					{
						if (str == "-") setMonomCoeff(symb_place, -1, rules);
						else if (str == "+") setMonomCoeff(symb_place, 1, rules);
						else setMonomCoeff(symb_place, stoi(str, nullptr), rules);
					}
					else if (istrail(symb))
					{
						builder.addMonomial(stoi(str, nullptr));
						to_state(4);
					}
					else throw ParsingException("некорректно введен коэффициент", symb_place);
					break;
				case 2:
					else if (isdig(symb)) str += symb;
					else if (issign(symb))
					{
						builder.addGrade(Grade(dictionary.get_var_num(str), 1));
						builder.addMonomial();
						to_state(1);
					}
					else if (istrail(symb))
					{
						builder.addGrade(Grade(dictionary.get_var_num(str), 1));
						builder.addMonomial();
						to_state(4);
					}
					else if (iscap(symb))
					{
						base = dictionary.get_var_num(str);
						to_state(3);
					}
					else if (isalph(symb))
					{
						builder.addGrade(Grade(dictionary.get_var_num(str), 1));
						to_state(2);
					}
					else throw ParsingException("некорректно введено имя переменной", symb_place);
					break;
				case 3:
					else if (isdig(symb)) to_state(5);
					else throw ParsingException("некорректно введена степень", symb_place);
					break;
				case 5:
					else if (isdig(symb))
						str += symb;
					else if (issign(symb))
					{
						builder.addGrade(Grade(base, stoi(str, nullptr)));
						builder.addMonomial();
						to_state(1);
					}
					else if (istrail(symb))
					{
						builder.addGrade(Grade(base, stoi(str, nullptr)));
						builder.addMonomial();
						to_state(4);
					}
					else if (isalph(symb))
					{
						builder.addGrade(Grade(base, stoi(str, nullptr)));
						to_state(2);
					}
					else throw ParsingException("некорректно введена степень", symb_place);
					break;
				case 6:
					if (symb == ']') state = state_served;
					break;
				}
			}
		}







_______________________________________________________________________









		do
		{
			symb = source[symb_place++];

			if (symb < 0 || symb > 122) throw ParsingException("введен недопустимый символ", symb_place);

			if (!isempty(symb))
			{
				switch (state)
				{
				case 0:
					if (symb == '[')
					{
						state_served = state;
						state = 6;
					}
					else if (issign(symb) || isdig(symb)) to_state(1);
					else if (isalph(symb)) setMonomCoeff(symb_place, 1, rules);
					else if (istrail(symb)) to_state(4);
					else throw ParsingException("некорректное начало полинома", symb_place);
					break;
				case 1:
					if (symb == '[')
					{
						state_served = state;
						state = 6;
					}
					else if (isdig(symb)) str += symb;
					else if (isalph(symb))
					{
						if (str == "-") setMonomCoeff(symb_place, -1, rules);
						else if (str == "+") setMonomCoeff(symb_place, 1, rules);
						else setMonomCoeff(symb_place, stoi(str, nullptr), rules);
					}
					else if (istrail(symb))
					{
						builder.addMonomial(stoi(str, nullptr));
						to_state(4);
					}
					else throw ParsingException("некорректно введен коэффициент", symb_place);
					break;
				case 2:
					if (symb == '[')
					{
						state_served = state;
						state = 6;
					}
					else if (isdig(symb)) str += symb;
					else if (issign(symb))
					{
						builder.addGrade(Grade(dictionary.get_var_num(str), 1));
						builder.addMonomial();
						to_state(1);
					}
					else if (istrail(symb))
					{
						builder.addGrade(Grade(dictionary.get_var_num(str), 1));
						builder.addMonomial();
						to_state(4);
					}
					else if (iscap(symb))
					{
						base = dictionary.get_var_num(str);
						to_state(3);
					}
					else if (isalph(symb))
					{
						builder.addGrade(Grade(dictionary.get_var_num(str), 1));
						to_state(2);
					}
					else throw ParsingException("некорректно введено имя переменной", symb_place);
					break;
				case 3:
					if (symb == '[')
					{
						state_served = state;
						state = 6;
					}
					else if (isdig(symb)) to_state(5);
					else throw ParsingException("некорректно введена степень", symb_place);
					break;
				case 5:
					if (symb == '[')
					{
						state_served = state;
						state = 6;
					}
					else if (isdig(symb))
						str += symb;
					else if (issign(symb))
					{
						builder.addGrade(Grade(base, stoi(str, nullptr)));
						builder.addMonomial();
						to_state(1);
					}
					else if (istrail(symb))
					{
						builder.addGrade(Grade(base, stoi(str, nullptr)));
						builder.addMonomial();
						to_state(4);
					}
					else if (isalph(symb))
					{
						builder.addGrade(Grade(base, stoi(str, nullptr)));
						to_state(2);
					}
					else throw ParsingException("некорректно введена степень", symb_place);
					break;
				case 6:
					if (symb == ']') state = state_served;
					break;
				}
			}
		}



